//////////////////////////////////////////////////////////////////////////
// Auto-generated by RAD
//////////////////////////////////////////////////////////////////////////
#include <WProgram.h>

#include <SoftwareSerial.h>

//////////////////////////////////////////////////////////////////////////
// plugin directives
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
// method signatures
//////////////////////////////////////////////////////////////////////////
void loop();
void setup();
// sketch signatures
void blink();
int main();
void track_total_loop_time(void);
unsigned long find_total_loop_time(void);
// plugin signatures


//////////////////////////////////////////////////////////////////////////
// plugin structs
//////////////////////////////////////////////////////////////////////////
void loop();

//////////////////////////////////////////////////////////////////////////
// plugin external variables
//////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
// sketch external variables
//////////////////////////////////////////////////////////////////////////
int sig_pin_1 = 7;
int sig_pin_2 = 8;

// servo_settings array

// debounce array

// hysteresis array

// spectrasymbol soft pot array


//////////////////////////////////////////////////////////////////////////
// variable and accessors
//////////////////////////////////////////////////////////////////////////
unsigned long start_loop_time = 0;
unsigned long total_loop_time = 0;


//////////////////////////////////////////////////////////////////////////
// assembler declarations
//////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
// setup
//////////////////////////////////////////////////////////////////////////
void setup() {
	// pin modes
	// other setup
Serial.begin(9600);
}

//////////////////////////////////////////////////////////////////////////
// helper methods
//////////////////////////////////////////////////////////////////////////

// RAD built-in helpers
void blink(int pin, int ms) {
	digitalWrite( pin, HIGH );
	delay( ms );
	digitalWrite( pin, LOW );
	delay( ms );
}
void track_total_loop_time(void)
{
	total_loop_time = millis() - start_loop_time;
	start_loop_time = millis();
}
unsigned long find_total_loop_time(void)
{

return total_loop_time;
}

//////////////////////////////////////////////////////////////////////////
// plugin methods
//////////////////////////////////////////////////////////////////////////
int ping(int pin) {

    pinMode(pin, OUTPUT);

    digitalWrite(pin, LOW);
    delayMicroseconds(2);
    digitalWrite(pin, HIGH);
    delayMicroseconds(5);
    digitalWrite(pin, LOW);

    pinMode(pin, INPUT);

    return pulseIn(pin, HIGH);
  }


// serial helpers
int serial_available() {
	return (Serial.available() > 0);
}
char serial_read() {
	return (char) Serial.read();
}
void serial_flush() {
	return Serial.flush();
}
void serial_print( char str ) {
	return Serial.print( str );
}
void serial_print( char* str ) {
	return Serial.print( str );
}
void serial_print( int i ) {
	return Serial.print( i );
}
void serial_print( long i ) {
	return Serial.print( i );
}
void serial_println( char* str ) {
	return Serial.println( str );
}
void serial_println( char str ) {
	return Serial.println( str );
}
void serial_println( int i ) {
	return Serial.println( i );
}
void serial_println( long i ) {
	return Serial.println( i );
}
void serial_print( unsigned long i ) {
	return Serial.print( i );
}

//////////////////////////////////////////////////////////////////////////
// main() function
//////////////////////////////////////////////////////////////////////////
int main() {
	init();
	setup();
	for( ;; ) { loop(); }
	return 0;
}

//////////////////////////////////////////////////////////////////////////
// loop!  Autogenerated by RubyToC, sorry it's ugly.
//////////////////////////////////////////////////////////////////////////
void
loop() {
track_total_loop_time();
if (serial_available()) {
if (serial_read() == 1) {
serial_print(ping(sig_pin_1));
serial_print(",");
serial_println(ping(sig_pin_2));
}
}
}
